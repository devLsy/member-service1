<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="study.memberservice1.mapper.OrderMapper">

    <!-- 컬럼명과 vo의 필드명이 상이한 부분이 있어서 resultMap으로 매핑 -->
    <resultMap id="orderResultMap" type="study.memberservice1.domain.vo.OrderResultVO">
        <id column="order_id" property="orderId"/>
        <result column="member_id" property="memberId"/>
        <result column="email" property="email"/>
        <result column="member_name" property="memberName"/>
        <result column="password" property="password"/>
        <result column="book_id" property="bookId"/>
        <result column="book_author" property="bookAuthor"/>
        <result column="book_name" property="bookName"/>
        <result column="book_price" property="bookPrice"/>
        <result column="book_stock_quantity" property="bookStockQuantity"/>
        <result column="order_date" property="orderDate"/>
        <result column="order_status" property="orderStatus"/>
        <result column="order_price" property="orderPrice"/>
        <result column="order_count" property="orderCount"/>
    </resultMap>

    <!-- 주문 -->
    <insert id="createOrder" parameterType="study.memberservice1.domain.vo.OrderVO">
        INSERT INTO orders (member_id, order_date, order_status)
        VALUES (#{memberId}, now(), #{orderStatus})
        <selectKey keyProperty="orderId" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 주문 취소 -->
    <update id="cancelOrder" parameterType="map">
        UPDATE orders SET
        order_status = #{orderStatus}
        WHERE order_id = #{orderId}
    </update>

    <!-- 주문 시 매핑 테이블에 데이터 저장 -->
    <insert id="storeOrderBookMapping" parameterType="map">
        INSERT INTO order_book_mapping (order_id, book_id, order_price, order_count, reg_date)
        VALUES (#{orderId}, #{bookId}, #{orderPrice}, #{orderCount}, now())
    </insert>

    <!-- 주문 아이디로 책 아이디, 주문수량 조회 -->
    <select id="findBookIdByOrderId" parameterType="Long" resultMap="orderResultMap">
        SELECT obm.book_id,
               obm.order_count
        FROM orders o LEFT OUTER JOIN order_book_mapping obm ON o.order_id = obm.order_id
        WHERE o.order_id = #{orderId}
        ORDER BY order_date DESC
    </select>

    <!-- 주문 목록 조회 -->
    <select id="findAllOrder" resultMap="orderResultMap" parameterType="study.memberservice1.domain.dto.OrderSearchDto">
        SELECT m.member_id,
               m.email,
               m.member_name,
               m.password,
               o.order_id,
               o.order_status,
               o.order_date,
               obm.order_price,
               obm.order_count,
               b.book_id,
               b.book_name,
               b.book_author,
               b.book_price,
               b.book_stock_quantity
        FROM member m LEFT OUTER JOIN orders o ON m.member_id = o.member_id
                      LEFT OUTER JOIN order_book_mapping obm ON o.order_id = obm.order_id
                      LEFT OUTER JOIN book b ON obm.book_id = b.book_id
        <where>
            <if test="memberName != null and memberName != ''">m.member_name = #{memberName}</if>
            <if test="orderStatus != null and orderStatus != ''">AND o.order_status = #{orderStatus}</if>
        </where>
        ORDER BY o.order_date DESC
    </select>

</mapper>